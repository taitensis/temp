---
// src/pages/[lang]/index.astro
import type { GetStaticPaths } from 'astro';
import BaseLayout from "@/layouts/BaseLayout.astro";
import RecipeCard from "@/components/RecipeCard.astro";
import FilterDrawer from "@/components/FilterDrawer";
import RecipeFilters from "@/components/RecipeFilters";
import { getRecipes } from "@/lib/supabase";
import { FEATURED_RECIPES_COUNT } from '@/lib/constants';

export const getStaticPaths = (() => {
  return [
    { params: { lang: 'en' } },
    { params: { lang: 'fr' } },
    { params: { lang: 'es' } },
    { params: { lang: 'nl' } }
  ];
}) satisfies GetStaticPaths;

const { lang } = Astro.params as { lang: 'en' | 'fr' | 'es' | 'nl' };

// Get current season first (needed for query)
const currentMonth = new Date().getMonth();
const currentSeason =
    currentMonth >= 2 && currentMonth <= 4 ? 'spring' :   // March-May
    currentMonth >= 5 && currentMonth <= 7 ? 'summer' :   // June-August
    currentMonth >= 8 && currentMonth <= 10 ? 'autumn' :  // September-November
    'winter';                                               // December-February

console.log('Current month:', currentMonth);
console.log('Current season:', currentSeason);

// ⚡ OPTIMIZATION: Fetch all recipes in parallel for better performance
const startTime = Date.now();
const [featuredRecipesResponse, seasonRecipes, latestRecipesResponse] = await Promise.all([
  getRecipes({ lang }, 1, FEATURED_RECIPES_COUNT),
  getRecipes({ lang, season: currentSeason }, 1, 12),
  getRecipes({ lang, sortBy: 'newest' }, 1, 12),
]);
const endTime = Date.now();

console.log(`⚡ All queries completed in ${endTime - startTime}ms`);

const featuredRecipes = featuredRecipesResponse.data || [];

console.log('Featured recipes count:', featuredRecipes.length);
console.log('Seasonal recipes count:', seasonRecipes.data?.length || 0);
console.log('Latest recipes count:', latestRecipesResponse.data?.length || 0);

const heroRecipe = featuredRecipes.length > 0 ? featuredRecipes[0] : null;
const otherRecipes = featuredRecipes.length > 1 ? featuredRecipes.slice(1) : [];

const translations = {
  en: { 
    searchFilter: 'Search & Filter', 
    featuredRecipes: 'Featured Recipes',
    seasonalRecipes: 'Seasonal Recipes',
    latestRecipes: 'Latest Recipes',
    noFeaturedRecipes: 'No featured recipes found.',
    noSeasonalRecipes: 'No seasonal recipes found.',
    noLatestRecipes: 'No recipes found.',
  },
  fr: { 
    searchFilter: 'Rechercher & Filtrer', 
    featuredRecipes: 'Recettes en vedette',
    seasonalRecipes: 'Recettes de saison',
    latestRecipes: 'Dernières recettes',
    noFeaturedRecipes: 'Aucune recette en vedette trouvée.',
    noSeasonalRecipes: 'Aucune recette de saison trouvée.',
    noLatestRecipes: 'Aucune recette trouvée.',
  },
  es: { 
    searchFilter: 'Buscar & Filtrar', 
    featuredRecipes: 'Recetas destacadas',
    seasonalRecipes: 'Recetas de temporada',
    latestRecipes: 'Últimas recetas',
    noFeaturedRecipes: 'No se encontraron recetas destacadas.',
    noSeasonalRecipes: 'No se encontraron recetas de temporada.',
    noLatestRecipes: 'No se encontraron recetas.',
  },
  nl: { 
    searchFilter: 'Zoeken & Filteren', 
    featuredRecipes: 'Uitgelichte recepten',
    seasonalRecipes: 'Seizoensrecepten',
    latestRecipes: 'Nieuwste recepten',
    noFeaturedRecipes: 'Geen uitgelichte recepten gevonden.',
    noSeasonalRecipes: 'Geen seizoensrecepten gevonden.',
    noLatestRecipes: 'Geen recepten gevonden.',
  },
};
const t = translations[lang] || translations['en'];
---

<BaseLayout
  title="Home"
  description="Discover my favourite recipes!"
  lang={lang}
>
  <div class="relative grid grid-cols-1 lg:grid-cols-[250px_1fr] gap-x-8 gap-y-12">
    <!-- Aside - container for sticky sidebar -->
    <aside class="lg:col-start-1 lg:col-end-2">
      <!-- Mobile Drawer -->
      <FilterDrawer lang={lang} client:load />
      
      <!-- Desktop Sidebar - Sticky between header and footer -->
      <div class="hidden lg:block sticky top-24 self-start">
        <div class="space-y-6 max-h-[calc(100vh-7rem)] overflow-y-auto overscroll-none pr-2 scrollbar-thin">
          <h3 class="text-2xl font-semibold mb-4">{t.searchFilter}</h3>
          <RecipeFilters
            lang={lang}
            initialFilters={{}}
            categories={[]}
            tags={[]}
            client:load
          />
        </div>
      </div>
    </aside>

    <!-- Main content area -->
    <main class="lg:col-start-2 lg:col-end-3 space-y-16">
      <!-- Featured Recipes Section -->
      <section>
        <h2 class="text-4xl font-bold mb-8">{t.featuredRecipes}</h2>

        {featuredRecipes.length > 0 ? (
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {heroRecipe && (
              <RecipeCard 
                recipe={heroRecipe} 
                variant="hero" 
                lang={lang} 
                className="md:col-span-2" 
              />
            )}
            {otherRecipes.map((recipe) => (
              recipe && <RecipeCard recipe={recipe} variant="default" lang={lang} />
            ))}
          </div>
        ) : (
          <p class="text-gray-500">{t.noFeaturedRecipes}</p>
        )}
      </section>

      <!-- Seasonal Recipes Section -->
      <section>
        <h2 class="text-4xl font-bold mb-8">{t.seasonalRecipes}</h2>

        {seasonRecipes?.data?.length ? (
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {seasonRecipes.data.map((recipe) => (
              <RecipeCard recipe={recipe} variant="default" lang={lang} />
            ))}
          </div>
        ) : (
          <p class="text-gray-500">{t.noSeasonalRecipes}</p>
        )}
      </section>

      <!-- Latest Recipes Section -->
      <section>
        <h2 class="text-4xl font-bold mb-8">{t.latestRecipes}</h2>

        {latestRecipesResponse?.data?.length ? (
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {latestRecipesResponse.data.map((recipe) => (
              <RecipeCard recipe={recipe} variant="default" lang={lang} />
            ))}
          </div>
        ) : (
          <p class="text-gray-500">{t.noLatestRecipes}</p>
        )}
      </section>
    </main>
  </div>
</BaseLayout>
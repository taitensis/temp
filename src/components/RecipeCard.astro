---
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from '@/components/ui/card';
import { Clock, Users, Star } from 'lucide-react';
import type { Language, RecipeCard as RecipeCardType, FullLocalizedRecipe } from '@/lib/types';
import { getRelativeLocaleUrl } from 'astro:i18n';
import { formatTime, formatRating, getDifficultyColor, truncateText } from '@/lib/utils';
import { useTranslations } from '@/lib/i18n';

// Props interface
interface Props {
  recipe: RecipeCardType | FullLocalizedRecipe;
  variant?: 'hero' | 'default' | 'compact' | 'list';
  lang?: Language;
  className?: string;
  showNutrition?: boolean;
}

const {
  recipe,
  variant = 'default',
  lang = 'en',
  className = '',
  showNutrition = false
} = Astro.props;

const t = useTranslations(lang);

// Get slug - handle both RecipeCard and FullLocalizedRecipe
const recipeSlug = 'slug' in recipe && recipe.slug ? recipe.slug : recipe.id;
const fullLocalizedUrl = getRelativeLocaleUrl(lang, `/recipes/${recipeSlug}`);

// Type guard to check if it's a FullLocalizedRecipe
const isFullLocalizedRecipe = (r: RecipeCardType | FullLocalizedRecipe): r is FullLocalizedRecipe => {
  return 'nutrition' in r && 'ingredients' in r && 'steps' in r;
};

// Get nutrition - handle both types
const nutrition = isFullLocalizedRecipe(recipe) ? recipe.nutrition : null;

// Get rating - RecipeCard has avg_rating, FullLocalizedRecipe doesn't have it yet
const rating: number | null = 'avg_rating' in recipe
  ? (typeof recipe.avg_rating === 'number' ? recipe.avg_rating : null)
  : null;
const ratingCount: number | null = 'rating_count' in recipe 
  ? (typeof recipe.rating_count === 'number' ? recipe.rating_count : null) 
  : null;

// Get difficulty - may not exist on all types
const difficulty = 'difficulty' in recipe ? recipe.difficulty : null;

// Get tags - only exists on FullLocalizedRecipe
const tags = isFullLocalizedRecipe(recipe) && recipe.tags ? recipe.tags : [];

// Variant-specific styling
const cardClasses = {
  hero: 'col-span-full lg:col-span-2',
  default: 'hover:shadow-lg transition-shadow',
  compact: 'max-w-sm',
  list: 'flex flex-row',
};

const imageClasses = {
  hero: 'h-64 md:h-96',
  default: 'h-48',
  compact: 'h-32',
  list: 'w-32 h-full',
};
---

<Card className={`overflow-hidden ${cardClasses[variant]} ${className}`}>
  <a href={fullLocalizedUrl}
   class="block group"
   aria-label={`${t.common.view} ${recipe.title}`}>
    
    <!-- Image -->
    {recipe.image_url && (
      <div class={`relative overflow-hidden ${variant === 'list' ? '' : 'aspect-video'}`}>
        <img 
          src={recipe.image_url} 
          alt={recipe.title}
          class={`w-full ${imageClasses[variant]} object-cover group-hover:scale-105 transition-transform duration-300`}
          loading={variant === 'hero' ? 'eager' : 'lazy'}
        />
        
        <!-- Badges -->
        <div class="absolute top-2 left-2 flex gap-2">
          {recipe.featured && (
            <span class="px-2 py-1 text-xs font-semibold bg-primary text-primary-foreground rounded">
              Featured
            </span>
          )}
          {difficulty && (
            <span class={`px-2 py-1 text-xs font-semibold bg-white/90 rounded ${typeof difficulty === 'string' ? getDifficultyColor(difficulty) : ''}`}>
              {t.filters.difficultyOptions[difficulty as keyof typeof t.filters.difficultyOptions] || difficulty}
            </span>
          )}
        </div>

        <!-- Favorite Button -->
        <button 
          class="absolute top-2 right-2 p-2 bg-white/80 rounded-full hover:bg-white transition-colors"
          aria-label={t.common.save}
          onclick="event.preventDefault(); event.stopPropagation();">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                  d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
          </svg>
        </button>
      </div>
    )}

    <!-- Content -->
    <div class={`p-${variant === 'compact' ? '3' : '4'}`}>
      <CardHeader className="p-0 mb-2">
        <CardTitle className="group-hover:text-primary transition-colors line-clamp-2">
          {recipe.title}
        </CardTitle>
        
        {variant !== 'compact' && recipe.description && (
          <CardDescription className="line-clamp-2 mt-1">
            {truncateText(recipe.description, 150)}
          </CardDescription>
        )}
      </CardHeader>

      <CardContent className="p-0 space-y-3">
        <!-- Meta Info -->
        <div class="flex flex-wrap items-center gap-3 text-sm text-muted-foreground">
          {recipe.total_time && (
            <div class="flex items-center gap-1">
              <Clock className="w-4 h-4" />
              <span>{formatTime(recipe.total_time)}</span>
            </div>
          )}
          
          {recipe.servings && (
            <div class="flex items-center gap-1">
              <Users className="w-4 h-4" />
              <span>{recipe.servings} {recipe.servings === 1 ? t.recipe.serving : t.recipe.servings}</span>
            </div>
          )}
          
          {rating !== null && rating !== undefined && typeof rating === 'number' && (
            <div class="flex items-center gap-1">
              <Star className="w-4 h-4 fill-yellow-400 text-yellow-400" />
              <span>{formatRating(rating)}</span>
              {ratingCount !== null && ratingCount !== undefined && ratingCount > 0 && (
                <span class="text-xs">({ratingCount})</span>
              )}
            </div>
          )}
        </div>

        <!-- Nutrition (Hero only) -->
        {showNutrition && nutrition && variant === 'hero' && (
          <div class="grid grid-cols-4 gap-2 pt-2 border-t">
            {nutrition.calories && (
              <div class="text-center">
                <div class="text-lg font-semibold">{Math.round(nutrition.calories)}</div>
                <div class="text-xs text-muted-foreground">{t.recipe.nutritionFacts.calories}</div>
              </div>
            )}
            {nutrition.protein && (
              <div class="text-center">
                <div class="text-lg font-semibold">{Math.round(nutrition.protein)}g</div>
                <div class="text-xs text-muted-foreground">{t.recipe.nutritionFacts.protein}</div>
              </div>
            )}
            {nutrition.carbs && (
              <div class="text-center">
                <div class="text-lg font-semibold">{Math.round(nutrition.carbs)}g</div>
                <div class="text-xs text-muted-foreground">{t.recipe.nutritionFacts.carbs}</div>
              </div>
            )}
            {nutrition.fat && (
              <div class="text-center">
                <div class="text-lg font-semibold">{Math.round(nutrition.fat)}g</div>
                <div class="text-xs text-muted-foreground">{t.recipe.nutritionFacts.fat}</div>
              </div>
            )}
          </div>
        )}
      </CardContent>

      <!-- Tags (Hero variant) -->
      {variant === 'hero' && tags.length > 0 && (
        <CardFooter className="p-0 pt-3 flex-wrap gap-2">
          {tags.slice(0, 5).map((tag) => (
            <span class="px-2 py-1 text-xs bg-primary/10 text-primary rounded-full">
              {tag.name}
            </span>
          ))}
        </CardFooter>
      )}
    </div>
  </a>
</Card>
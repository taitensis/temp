---
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from '@/components/ui/card';
import type { RecipeCardProps } from '@/lib/types';
import { getRelativeLocaleUrl } from 'astro:i18n';
// import { formatTime } from '@/lib/supabase'

interface Props extends RecipeCardProps {
  lang?: 'en' | 'fr';
  className?: string;
}

const { 
  recipe, 
  variant = 'default',
  lang = 'en',
  showNutrition = false 
} = Astro.props;

const targetPath = `/recipes/${recipe.slug}`;
const fullLocalizedUrl = getRelativeLocaleUrl(lang, targetPath);

// Variant-specific styling
const cardClasses = {
  hero: 'col-span-full md:col-span-2 lg:col-span-3 py-0',
  default: 'hover:shadow-lg transition-shadow py-0',
  compact: 'max-w-sm py-0',
  list: 'flex-row items-center',
};

const imageClasses = {
  hero: 'h-96 object-cover',
  default: 'h-48 object-cover',
  compact: 'h-32 object-cover',
  list: 'h-24 w-24 object-cover shrink-0',
};

const contentClasses = {
  hero: 'p-6',
  default: 'p-4',
  compact: 'p-3',
  list: 'flex-1 p-4',
};

const nutrition = 'nutrition' in recipe ? recipe.nutrition : null;
---

<Card className={`${cardClasses[variant]} ${Astro.props.className ?? ''}`}>
    <a href={fullLocalizedUrl}
        class="block ground"
        aria-label={`View recipe: ${recipe.title}`}
        >
    {recipe.image_url && (
      <div class={`overflow-hidden ${variant === 'list' ? 'rounded-l-lg' : 'rounded-t-lg'}`}>
        <img 
          src={recipe.image_url} 
          alt={recipe.title}
          class={`w-full ${imageClasses[variant]} group-hover:scale-105 transition-transform duration-300`}
          loading={variant === 'hero' ? 'eager' : 'lazy'}
        />
      </div>
    )}

    <div class={contentClasses[variant]}>
      <CardHeader className="p-0 mb-3">
        <CardTitle className="group-hover:text-primary transition-colors line-clamp-2">
          {recipe.title}
        </CardTitle>
        
        {variant !== 'compact' && recipe.description && (
          <CardDescription className="line-clamp-2 mt-2">
            {recipe.description}
          </CardDescription>
        )}
      </CardHeader>

    {variant !== 'compact' && (
        <CardContent className="p-0 mb-3">
          <div class="flex flex-wrap gap-4 text-sm text-muted-foreground">
            {recipe.total_time && (
              <div class="flex items-center gap-1">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                {/* <span>{formatTime(recipe.total_time)}</span> */}
              </div>
            )}
            
            {recipe.servings && (
              <div class="flex items-center gap-1">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                </svg>
                <span>{recipe.servings} servings</span>
              </div>
            )}
          </div>

          {showNutrition && nutrition && variant === 'hero' && (
            <div class="mt-4 grid grid-cols-4 gap-2 text-xs">
              {nutrition.calories && (
                <div class="text-center p-2 bg-muted rounded">
                  <div class="font-semibold">{Math.round(nutrition.calories)}</div>
                  <div class="text-muted-foreground">cal</div>
                </div>
              )}
              {nutrition.protein && (
                <div class="text-center p-2 bg-muted rounded">
                  <div class="font-semibold">{Math.round(nutrition.protein)}g</div>
                  <div class="text-muted-foreground">protein</div>
                </div>
              )}
              {nutrition.carbs && (
                <div class="text-center p-2 bg-muted rounded">
                  <div class="font-semibold">{Math.round(nutrition.carbs)}g</div>
                  <div class="text-muted-foreground">carbs</div>
                </div>
              )}
              {nutrition.fat && (
                <div class="text-center p-2 bg-muted rounded">
                  <div class="font-semibold">{Math.round(nutrition.fat)}g</div>
                  <div class="text-muted-foreground">fat</div>
                </div>
              )}
            </div>
          )}
        </CardContent>
      )}

    {variant === 'hero' && recipe.tags && recipe.tags.length > 0 && (
        <CardFooter className="p-0 flex-wrap gap-2">
          {recipe.tags.slice(0, 5).map((tag) => (
            <span class="px-2 py-1 text-xs bg-primary/10 text-primary rounded-full">
              {tag.name}
            </span>
          ))}
        </CardFooter>
      )}
    </div>
  </a>
</Card>

<!-- <style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style> -->
---
// Importez les composants shadcn nécessaires pour les entrées de formulaire
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Language, Season } from '@/lib/types'; // Importez le type Season
import { Search } from 'lucide-astro'; // Icône de recherche

interface Props {
  lang: Language; 
}

const { lang } = Astro.props;

// Traductions des labels
const t = {
    searchPlaceholder: lang === 'fr' ? 'Nom de la recette ou ingrédient...' : 'Recipe name or ingredient...',
    difficultyLabel: lang === 'fr' ? 'Difficulté' : 'Difficulty',
    timeLabel: lang === 'fr' ? 'Temps Max. (minutes)' : 'Max Time (minutes)',
    seasonLabel: lang === 'fr' ? 'Saison' : 'Season',
    tagsLabel: lang === 'fr' ? 'Tags & Catégories' : 'Tags & Categories',
    applyButton: lang === 'fr' ? 'Rechercher' : 'Search'
};

// Données de mock pour les filtres (à remplacer par des données Supabase réelles)
const tags = [
    { id: '1', name: lang === 'fr' ? 'Végétarien' : 'Vegetarian' },
    { id: '2', name: lang === 'fr' ? 'Sans Gluten' : 'Gluten-Free' },
    { id: '3', name: lang === 'fr' ? 'Rapide' : 'Quick' },
    { id: '4', name: lang === 'fr' ? 'Dessert' : 'Dessert' },
    { id: '5', name: lang === 'fr' ? 'Plat Principal' : 'Main Dish' },
];

const difficulties = [
    { value: 'easy', label: lang === 'fr' ? 'Facile' : 'Easy' },
    { value: 'medium', label: lang === 'fr' ? 'Moyen' : 'Medium' },
    { value: 'hard', label: lang === 'fr' ? 'Difficile' : 'Hard' },
];
---

<form class="space-y-6">
    
    {/* FILTRE 1 : Recherche par Texte (Nom/Ingrédient) */}
    <div class="space-y-2">
        <Label htmlFor="search">{t.searchPlaceholder}</Label>
        <div class="relative">
            <Search class="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
            <Input 
                id="search" 
                name="search"
                placeholder={t.searchPlaceholder} 
                class="pl-9"
            />
        </div>
    </div>

    {/* FILTRE 2 : Difficulté (Select) */}
    <div class="space-y-2">
        <Label htmlFor="difficulty">{t.difficultyLabel}</Label>
        {/* Le composant Select nécessite l'hydratation (client:load) s'il est utilisé en dehors du Drawer */}
        <Select name="difficulty"> 
            <SelectTrigger id="difficulty">
                <SelectValue placeholder={t.difficultyLabel} />
            </SelectTrigger>
            <SelectContent>
                {difficulties.map((d) => (
                    <SelectItem value={d.value}>{d.label}</SelectItem>
                ))}
            </SelectContent>
        </Select>
    </div>

    {/* FILTRE 3 : Temps Maximum (Input de type Range ou Number) */}
    <div class="space-y-2">
        <Label htmlFor="maxTime">{t.timeLabel}</Label>
        <div class="flex items-center space-x-2">
            <Input 
                id="maxTime" 
                name="maxTime"
                type="number" 
                placeholder="60" 
                min="5" 
                max="240"
            />
            <span class="text-sm text-muted-foreground">{lang === 'fr' ? 'minutes' : 'minutes'}</span>
        </div>
    </div>
    
    {/* FILTRE 4 : Tags (Checkboxes / Multi-select) */}
    <div class="space-y-3">
        <Label>{t.tagsLabel}</Label>
        {/* Utilisez un div scrollable pour éviter que la liste soit trop longue */}
        <div class="flex flex-col space-y-2 max-h-52 overflow-y-auto pr-2">
            {tags.map((tag) => (
                <div class="flex items-center space-x-3">
                    <input 
                        type="checkbox" 
                        id={`tag-${tag.id}`} 
                        name="tags"
                        value={tag.id}
                        class="h-4 w-4 rounded border-gray-300 text-primary focus:ring-primary"
                    />
                    <Label htmlFor={`tag-${tag.id}`} class="font-normal cursor-pointer">
                        {tag.name}
                    </Label>
                </div>
            ))}
        </div>
    </div>

    {/* Bouton de Soumission pour la version Desktop */}
    <div class="hidden lg:block pt-2">
        <Button type="submit" class="w-full">
            {t.applyButton}
        </Button>
    </div>
</form>
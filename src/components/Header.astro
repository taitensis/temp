---
import { Moon, Sun, Menu, X, User } from 'lucide-react';
import { useTranslations, getAltLang } from '@/lib/i18n';
import { buildLocalizedUrl } from '@/lib/path-handling';
import { getAlternateLanguageUrl } from '@/lib/LanguageSwitcher';
import type { Language } from '@/lib/types';

interface Props {
  lang: Language;
}

const { lang } = Astro.props;
const t = useTranslations(lang);
const altLang = getAltLang(lang);

// Dynamic site name based on language
const siteName = t.site.name;

// Get language switch URL using official Astro i18n API
const switchLangPath = getAlternateLanguageUrl(Astro.url.pathname, lang);

// Navigation links with proper i18n
const navLinks = [
  { href: `/recipes`, text: t.nav.recipes },
  { href: `/categories`, text: t.nav.categories },
  { href: `/seasonal`, text: t.nav.seasonal },
  { href: `/about`, text: t.nav.about },
];

// Build localized URLs for navigation
const getNavUrl = (path: string) => buildLocalizedUrl(lang, path);
const currentPath = Astro.url.pathname;
---

<header class="sticky top-0 z-50 bg-background/90 backdrop-blur-sm border-b">
  <div class="container mx-auto px-4">
    <div class="flex items-center justify-between h-16">
      <!-- Logo/Site Name -->
      <a href={getNavUrl('/')} 
         class="text-xl md:text-2xl font-bold tracking-tight text-primary hover:opacity-80 transition-opacity">
        {siteName}
      </a>

      <!-- Desktop Navigation -->
      <nav class="hidden md:flex items-center space-x-6">
        {navLinks.map((link) => (
          <a href={getNavUrl(link.href)} 
             class="text-sm font-medium hover:text-primary transition-colors"
             aria-current={currentPath.includes(link.href) ? 'page' : undefined}>
            {link.text}
          </a>
        ))}
      </nav>

      <!-- Right Actions -->
      <div class="flex items-center space-x-3">
        <!-- Search Button -->
        <button 
          id="search-trigger"
          aria-label={t.common.search}
          class="p-2 rounded-full hover:bg-muted transition-colors">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                  d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
        </button>

        <!-- Language Switcher -->
        <a href={switchLangPath} 
           class="px-3 py-1 text-sm font-medium border rounded-md hover:bg-muted transition-colors"
           aria-label={`Switch to ${altLang === 'en' ? 'English' : 'FranÃ§ais'}`}>
          {altLang.toUpperCase()}
        </a>

        <!-- Theme Toggle -->
        <button 
          aria-label="Toggle Theme"
          class="p-2 rounded-full hover:bg-muted transition-colors"
          id="theme-toggle">
          <Sun className="w-5 h-5 dark:hidden" />
          <Moon className="w-5 h-5 hidden dark:block" />
        </button>

        <!-- User Menu -->
        <button 
          id="user-menu-trigger"
          class="p-2 rounded-full hover:bg-muted transition-colors">
          <User className="w-5 h-5" />
        </button>

        <!-- Mobile Menu Toggle -->
        <button 
          id="mobile-menu-toggle"
          class="md:hidden p-2 rounded-full hover:bg-muted transition-colors">
          <Menu className="w-5 h-5" id="menu-icon" />
          <X className="w-5 h-5 hidden" id="close-icon" />
        </button>
      </div>
    </div>

    <!-- Mobile Navigation -->
    <nav id="mobile-nav" class="md:hidden hidden pb-4">
      <ul class="space-y-2">
        {navLinks.map((link) => (
          <li>
            <a href={getNavUrl(link.href)} 
               class="block px-3 py-2 text-base font-medium hover:bg-muted rounded-md">
              {link.text}
            </a>
          </li>
        ))}
      </ul>
    </nav>
  </div>
</header>

<!-- Search Modal
<div id="search-modal" class="hidden fixed inset-0 z-50 bg-black/50">
  <div class="container mx-auto px-4 pt-20">
    <div class="bg-background rounded-lg p-4 max-w-2xl mx-auto">
      <input 
        type="search" 
        id="search-input"
        placeholder={t.filters.search}
        class="w-full px-4 py-2 border rounded-md"
        autofocus
      />
      <div id="search-results" class="mt-4"></div>
    </div>
  </div>
</div> -->

<script>
  // Theme toggle
  const themeToggle = document.getElementById('theme-toggle');
  const savedTheme = localStorage.getItem('theme');
  
  if (savedTheme === 'dark' || (!savedTheme && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
    document.documentElement.classList.add('dark');
  }
  
  themeToggle?.addEventListener('click', () => {
    document.documentElement.classList.toggle('dark');
    localStorage.setItem(
      'theme',
      document.documentElement.classList.contains('dark') ? 'dark' : 'light'
    );
  });

  // Mobile menu toggle
  const mobileToggle = document.getElementById('mobile-menu-toggle');
  const mobileNav = document.getElementById('mobile-nav');
  const menuIcon = document.getElementById('menu-icon');
  const closeIcon = document.getElementById('close-icon');
  
  mobileToggle?.addEventListener('click', () => {
    mobileNav?.classList.toggle('hidden');
    menuIcon?.classList.toggle('hidden');
    closeIcon?.classList.toggle('hidden');
  });

  // // Search modal
  // const searchTrigger = document.getElementById('search-trigger');
  // const searchModal = document.getElementById('search-modal');
  // const searchInput = document.getElementById('search-input') as HTMLInputElement;
  
  // searchTrigger?.addEventListener('click', () => {
  //   searchModal?.classList.toggle('hidden');
  //   searchInput?.focus();
  // });
  
  // searchModal?.addEventListener('click', (e) => {
  //   if (e.target === searchModal) {
  //     searchModal.classList.add('hidden');
  //   }
  // });
  
  // // Quick search functionality
  // searchInput?.addEventListener('input', async (e) => {
  //   const query = (e.target as HTMLInputElement).value;
  //   if (query.length < 2) return;
    
  //   // Implement search API call here
  //   const results = document.getElementById('search-results');
  //   if (results) {
  //     results.innerHTML = `<p class="text-muted-foreground">Searching for "${query}"...</p>`;
  //   }
  // });
</script>